#!/bin/bash

set -e

cd /

EXAMPLES=$(cat <<- EOF
Example:
  Docker:

    docker run -v <path>/saml_idp.xml:/etc/httpd/conf.d/saml_idp.xml -e BACKEND=https://api.example.com:8443 kovarikkarel/saml-proxy
EOF
)
if [ ! -z "$IDP_METADATA" ]; then
   wget -O /etc/httpd/conf.d/saml_idp.xml "$IDP_METADATA"
fi
if [ ! -f /etc/httpd/conf.d/saml_idp.xml ]; then
    echo -e "No saml_idp.xml file found.\n\n" \
            "In order to get the proxy running you must provide a saml_idp.xml file\n" \
            "in /etc/httpd/conf.d/ directory.\n\n" \
            "$EXAMPLES"
    exit 1
fi

if [ -z "$BACKEND" ]; then
    echo -e "No BACKEND environement variable is set.\n\n" \
            "In order to get the proxy running you must provide a BACKEND environment variable.\n\n" \
            "$EXAMPLES"
    exit 1
fi

# Get environment
export REAL_HOST=`hostname -f`
export SCHEMA=${SCHEMA:-https}
export HOST=${PROXY_HOST:-$REAL_HOST}
export realm=`echo $HOST | tr [a-z] [A-Z]`
export BACKEND=${BACKEND:-https://api.example.com:8443}
export MELLON_PATH=${MELLON_PATH:-mellon}
export LISTEN_PORT=${LISTEN_PORT:-3063}

# Create mod_auth_mellon service provider config
if [ -f /etc/httpd/conf.d/saml_sp.key ] || [ -f /etc/httpd/conf.d/saml_sp.cert ] || [ -f /etc/httpd/conf.d/saml_sp.xml ]; then
    if [ ! -f /etc/httpd/conf.d/saml_sp.key ]; then
        echo "/etc/httpd/conf.d/saml_sp.key file is not provided."
        exit 1
    fi
    if [ ! -f /etc/httpd/conf.d/saml_sp.cert ]; then
        echo "/etc/httpd/conf.d/saml_sp.cert file is not provided."
        exit 1
    fi
    if [ ! -f /etc/httpd/conf.d/saml_sp.xml ]; then
        echo "/etc/httpd/conf.d/saml_sp.xml file is not provided."
        exit 1
    fi
else
    pushd /etc/httpd/conf.d
    echo -e "Generating new service provider certificate.\n\n" \
            "In order to avoid generating new certificate every time. You can provide the following files as volumes:\n" \
            " * /etc/httpd/conf.d/saml_sp.key - private key\n" \
            " * /etc/httpd/conf.d/saml_sp.cert - certificate\n" \
            " * /etc/httpd/conf.d/saml_sp.xml - SAML SP xml\n\n" \
            "Using provided mellon_create_metadata.sh script.\n\n" \
            "  /usr/libexec/mod_auth_mellon/mellon_create_metadata.sh ${SCHEMA}://${HOST} ${SCHEMA}://${HOST}/${MELLON_PATH}\n\n" \
            "--------------------------------------------------\n"
    /usr/libexec/mod_auth_mellon/mellon_create_metadata.sh ${SCHEMA}://${HOST} ${SCHEMA}://${HOST}/${MELLON_PATH}
    mv ${SCHEMA}_${HOST//-/_}.cert saml_sp.cert -f
    mv ${SCHEMA}_${HOST//-/_}.key saml_sp.key -f
    mv ${SCHEMA}_${HOST//-/_}.xml saml_sp.xml -f
    popd
fi

# Request headers mapping
REQUEST_HEADERS=""

for varname in ${!SAML_MAP_*}
do
    REQUEST_HEADER_NAME=${!varname}
    SAML_ATTR=${varname:9}
    echo "Mapping $SAML_ATTR attribute to $REQUEST_HEADER_NAME request header"

    REQUEST_HEADER_CONFIG=$(cat << EOF
    RequestHeader set ${REQUEST_HEADER_NAME} %{MELLON_$SAML_ATTR}e env=MELLON_$SAML_ATTR
EOF
)
    REQUEST_HEADERS=$(echo -e "$REQUEST_HEADERS\n$REQUEST_HEADER_CONFIG")
done
export REQUEST_HEADERS

# Unsecured url
UNSECURED_BLOCK=""
if [ ! -z "$UNSECURED_URI" ]; then
UNSECURED_BLOCK=$(cat <<- EOF
<Location ${UNSECURED_URI}>
    MellonEnable "off"
    # Proxy to backend as unprotected resource
    ProxyPassMatch ${BACKEND}
</Location>
EOF
)
fi
export UNSECURED_BLOCK

# Configure Apache proxy and auth
cat /etc/httpd/conf.d/proxy.conf.template | envsubst '$SCHEMA,$HOST,$BACKEND,$MELLON_PATH,$REQUEST_HEADERS,$CUSTOM_CONFIG,$LISTEN_PORT,$UNSECURED_BLOCK' > /etc/httpd/conf.d/proxy.conf

# Print configuration
echo "Will use following configuration:"
cat /etc/httpd/conf.d/proxy.conf

# Start apache
exec httpd -D FOREGROUND
